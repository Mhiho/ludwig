{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","styles/mypoems.module.scss","components/Poems/PoemReading.js","components/Poems/Comments.js"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","module","exports","PoemReading","React","Component","state","isLoading","id","data","comments","commentsData","myCom","counter","this","props","match","params","setState","url","adresse","headers","getUser","token","fetch","then","response","json","url2","headers2","length","time","Date","fulltime","getDate","getMonth","getFullYear","getHours","getMinutes","console","log","obj","commentAuthor","user","name","comment","commentedAt","toAdd","method","body","JSON","stringify","ok","style","marginTop","width","height","display","justifyContent","alignItems","className","loading","loader","classes","ContainerReading","author","title","genre","categories","map","cat","index","key","poem","akapits","akapit","indAka","Akapit","lines","line","Line","year","description","onClick","showCommentsHandler","type","onChange","e","target","value","addComment"],"mappings":"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","file":"static/js/11.c62db5b1.chunk.js","sourcesContent":["import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"mypoems_Container__33Gd_\",\"Poem\":\"mypoems_Poem__peHnm\",\"Opacity\":\"mypoems_Opacity___BPts\",\"opacity\":\"mypoems_opacity__329wk\",\"Frame\":\"mypoems_Frame__1bQ5k\",\"addAkaBtn\":\"mypoems_addAkaBtn__ZkuB-\",\"addLine\":\"mypoems_addLine__3lCU6\",\"goBackBtn\":\"mypoems_goBackBtn__1bXlS\",\"deleteBtn\":\"mypoems_deleteBtn__Sgj7X\",\"Akapit\":\"mypoems_Akapit__-AIiE\",\"Line\":\"mypoems_Line__2aOFC\",\"NewPoemBtn\":\"mypoems_NewPoemBtn__3_GoL\",\"ContainerPoem\":\"mypoems_ContainerPoem__1iUfi\",\"ContainerReading\":\"mypoems_ContainerReading__3EHwV\",\"MyPoem\":\"mypoems_MyPoem__KLae-\"};","import React,{Component} from 'react'\nimport {getUser} from '../../services/auth'\nimport {adresse} from '../../config'\nimport classes from '../../styles/mypoems.module.scss'\nimport loading from '../../styles/app.module.scss'\nimport Comments from './Comments'\n\n\nclass PoemReading extends Component {\n    state= {\n        isLoading: true,\n        id: null,\n        data: null,\n        comments: false,\n        commentsData: [],\n        myCom: '',\n        counter: 0\n    }\n    componentDidMount(){\n        let {id} = this.props.match.params\n        this.setState({\n            id: id\n        }, ()=>{\n            const url = `${adresse}poems/poem/${this.state.id}`\n            const headers = { 'Content-Type': 'application/json',\n                              'Authorization': 'Bearer ' + `${getUser().token}`\n        }\n        fetch(url, {\n          headers: headers\n        }).then(response=>\n          response.json()\n        ).then(data=>{\n        this.setState({data}\n            ,()=>{\n            const url2 = `${adresse}comments/showComments/${this.state.id}`\n            const headers2 = { 'Content-Type': 'application/json',\n                              'Authorization': 'Bearer ' + `${getUser().token}`\n            }\n        fetch(url2, {\n          headers: headers2\n        }).then(response=>\n          response.json()\n        ).then(data=>{\n        this.setState({commentsData: data}\n        ,()=>{\n    this.setState({isLoading: false,\n                   counter: this.state.commentsData.length})\n    })\n})\n})\n        })\n        })\n    }\n    showCommentsHandler(){\n        this.setState({comments: !this.state.comments})\n            \n    }\n    addComment(){\n        this.setState({counter: this.state.counter + 1},()=>{\n            const url = `${adresse}comments/add/${this.state.id}`\n            const headers = { 'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + `${getUser().token}`\n        }\n        const time = new Date()\n        const fulltime = time.getDate() + \"/\"\n        + (time.getMonth()+1)  + \"/\" \n        + time.getFullYear() + \" @ \"  \n        + time.getHours() + \":\"  \n        + time.getMinutes()\n        console.log(fulltime)\n        const obj = {commentAuthor: getUser().user.name,\n                     comment: this.state.myCom,\n                     commentedAt: fulltime }\n        const toAdd = [...this.state.commentsData, obj ]\n        this.setState({commentsData: toAdd})\n        fetch(url,{\n            method: \"POST\",\n            headers: headers,\n            body: JSON.stringify(\n                obj\n            )\n        }).then(response=> {\n            if(!response.ok){\n                console.log('bÅ‚Ä…d')\n            }\n            return response.json()\n        })\n        .then(data => {})\n    })\n    }\n\n    render(){\n        console.log(this.state.commentsData)\n        if(this.state.isLoading === true) { return(<div style={{marginTop: '-180px', width: '100vw', height: '100vh', display: 'flex', justifyContent: 'center', alignItems: 'center'}}><div className={loading.loader}></div></div>)}\n        return (\n        \n            <div className={classes.ContainerReading}>\n                <h2>{this.state.data.author}</h2>\n                <h3>{this.state.data.title}</h3>\n                <h4>{this.state.data.genre}</h4>\n                <div>{this.state.data.categories.map((cat,index)=>(<h5 key={index}>{cat}</h5>))}</div>\n\n                {\n                    this.state.data.poem.akapits.map((akapit,indAka)=>(\n                        <div className={classes.Akapit} key={indAka}>\n                        {  akapit.lines.map((line,index)=>(\n                            <p className={classes.Line} key={index}>{line}</p>\n                        ))\n\n                        }\n                        </div>\n                    ))\n                }\n              <h5>{this.state.data.year}</h5>\n              <p>{this.state.data.description}</p>\n              <div style={{marginTop: '30px'}}>\n                <button onClick={()=>this.showCommentsHandler()}>WyÅ›wietl komentarze</button>\n              </div>\n              <div>\n                {\n                    this.state.comments === false ? null :\n                    \n                    <div>\n                <div>\n                {this.state.commentsData.map((comment) => (\n                    <div>\n                        <h3>{comment.commentAuthor}</h3>\n                        <h4>{comment.comment}</h4>\n                        <h5>{comment.commentedAt}</h5>\n                    </div>\n                    ))}\n                    </div>\n                            </div>\n                         } \n                        <div>\n                    <input type=\"text\"\n                           onChange={e=>this.setState({myCom: e.target.value})}\n                           value={this.state.myCom}\n                           name=\"comment\"\n                    />\n                    <button onClick={()=>this.addComment()}>dodaj komentarz</button>\n                 </div>\n            </div>\n           </div> \n        )\n    }\n}\n\nexport default PoemReading\n\n","import React from 'react'\nimport {getUser} from '../../services/auth'\nimport {adresse} from '../../config'\n\nclass Comments extends React.Component {\n    state = {\n        data: [],\n        myCom: ''\n    }\n    componentDidMount(){\n   \n            const url = `${adresse}comments/showComments/${this.props.idPoem}`\n            const headers = { 'Content-Type': 'application/json',\n                              'Authorization': 'Bearer ' + `${getUser().token}`\n        }\n        fetch(url, {\n          headers: headers\n        }).then(response=>\n          response.json()\n        ).then(data=>{\n        this.setState({data: data},()=>{\n            this.setState({isLoading: false})\n        })\n        })\n        \n    }\n    \n    addComment(){\n        const url = `${adresse}comments/add/${this.props.idPoemm}`\n        const headers = { 'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + `${getUser().token}`\n    }\n    fetch(url,{\n        method: \"POST\",\n        headers: headers,\n        body: JSON.stringify({ comment: this.state.comment})\n    }).then(response=> {\n        if(!response.ok){\n            console.log('bÅ‚Ä…d')\n        }\n        return response.json()\n    })\n    .then(data => {\n    })\n}\ncomponentDidUpdate(prevProps,prevState){\n    if(prevState.data.length !== this.state.data.length){\n        const url = `${adresse}comments/showComments/${this.props.idPoem}`\n        const headers = { 'Content-Type': 'application/json',\n                          'Authorization': 'Bearer ' + `${getUser().token}`\n    }\n    fetch(url, {\n      headers: headers\n    }).then(response=>\n      response.json()\n    ).then(data=>{\n    this.setState({data: data})\n    })\n      \n    }\n\n}\n\nrender(){\n    console.log(this.state.data.length)\n        console.log(this.state.data)\n        return(\n            <div>\n                <div>\n                {this.state.data.map((comment) => (\n                    <div>\n                        <h3>{comment.commentAuthor}</h3>\n                        <h4>{comment.comment}</h4>\n                        <h5>{comment.commentedAt}</h5>\n                    </div>\n                    ))}\n                    <input type=\"text\"\n                           onChange={e=>this.setState({comment: e.target.value})}\n                           value={this.state.comment}\n                           name=\"comment\"\n                    />\n                    <button onClick={()=>this.addComment()}>dodaj komentarz</button>\n                    </div>\n\n            </div>\n        )\n    }\n}\n\nexport default Comments"],"sourceRoot":""}