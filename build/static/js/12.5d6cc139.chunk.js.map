{"version":3,"sources":["styles/mypoems.module.scss","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/Poems/PoemReading.js","components/Poems/Comments.js"],"names":["module","exports","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","PoemReading","React","Component","state","isLoading","id","data","comments","commentsData","myCom","counter","this","props","match","params","setState","url","adresse","headers","Authorization","getUser","token","fetch","then","response","json","url2","headers2","length","time","Date","fulltime","getDate","getMonth","getFullYear","getHours","getMinutes","console","log","obj","commentAuthor","user","name","comment","commentedAt","toAdd","method","body","JSON","stringify","ok","style","marginTop","width","height","display","justifyContent","alignItems","className","loading","loader","classes","ContainerReading","author","title","genre","categories","map","cat","index","key","poem","akapits","akapit","indAka","Akapit","lines","line","Line","year","description","onClick","showCommentsHandler","type","onChange","e","target","value","addComment"],"mappings":"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","file":"static/js/12.5d6cc139.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"mypoems_Container__33Gd_\",\"Poem\":\"mypoems_Poem__peHnm\",\"Opacity\":\"mypoems_Opacity___BPts\",\"opacity\":\"mypoems_opacity__329wk\",\"Frame\":\"mypoems_Frame__1bQ5k\",\"addAkaBtn\":\"mypoems_addAkaBtn__ZkuB-\",\"addLine\":\"mypoems_addLine__3lCU6\",\"goBackBtn\":\"mypoems_goBackBtn__1bXlS\",\"deleteBtn\":\"mypoems_deleteBtn__Sgj7X\",\"Akapit\":\"mypoems_Akapit__-AIiE\",\"Line\":\"mypoems_Line__2aOFC\",\"NewPoemBtn\":\"mypoems_NewPoemBtn__3_GoL\",\"ContainerPoem\":\"mypoems_ContainerPoem__1iUfi\",\"ContainerReading\":\"mypoems_ContainerReading__3EHwV\",\"MyPoem\":\"mypoems_MyPoem__KLae-\"};","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, { Component } from \"react\";\nimport { getUser } from \"../../services/auth\";\nimport { adresse } from \"../../config\";\nimport classes from \"../../styles/mypoems.module.scss\";\nimport loading from \"../../styles/app.module.scss\";\nimport Comments from \"./Comments\";\n\nclass PoemReading extends Component {\n  state = {\n    isLoading: true,\n    id: null,\n    data: null,\n    comments: false,\n    commentsData: [],\n    myCom: \"\",\n    counter: 0,\n  };\n  componentDidMount() {\n    let { id } = this.props.match.params;\n    this.setState(\n      {\n        id: id,\n      },\n      () => {\n        const url = `${adresse}/poems/poem/${this.state.id}`;\n        const headers = {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + getUser().token,\n        };\n        fetch(url, {\n          headers: headers,\n        })\n          .then((response) => response.json())\n          .then((data) => {\n            this.setState({ data }, () => {\n              const url2 = `${adresse}comments/showComments/${this.state.id}`;\n              const headers2 = {\n                \"Content-Type\": \"application/json\",\n                Authorization: \"Bearer \" + `${getUser().token}`,\n              };\n              fetch(url2, {\n                headers: headers2,\n              })\n                .then((response) => response.json())\n                .then((data) => {\n                  this.setState({ commentsData: data }, () => {\n                    this.setState({\n                      isLoading: false,\n                      counter: this.state.commentsData.length,\n                    });\n                  });\n                });\n            });\n          });\n      }\n    );\n  }\n  showCommentsHandler() {\n    this.setState({ comments: !this.state.comments });\n  }\n  addComment() {\n    this.setState({ counter: this.state.counter + 1 }, () => {\n      const url = `${adresse}comments/add/${this.state.id}`;\n      const headers = {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + `${getUser().token}`,\n      };\n      const time = new Date();\n      const fulltime =\n        time.getDate() +\n        \"/\" +\n        (time.getMonth() + 1) +\n        \"/\" +\n        time.getFullYear() +\n        \" @ \" +\n        time.getHours() +\n        \":\" +\n        time.getMinutes();\n      console.log(fulltime);\n      const obj = {\n        commentAuthor: getUser().user.name,\n        comment: this.state.myCom,\n        commentedAt: fulltime,\n      };\n      const toAdd = [...this.state.commentsData, obj];\n      this.setState({ commentsData: toAdd });\n      fetch(url, {\n        method: \"POST\",\n        headers: headers,\n        body: JSON.stringify(obj),\n      })\n        .then((response) => {\n          if (!response.ok) {\n            console.log(\"bÅ‚Ä…d\");\n          }\n          return response.json();\n        })\n        .then((data) => {});\n    });\n  }\n\n  render() {\n    console.log(this.state.commentsData);\n    if (this.state.isLoading === true) {\n      return (\n        <div\n          style={{\n            marginTop: \"-180px\",\n            width: \"100vw\",\n            height: \"100vh\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        >\n          <div className={loading.loader}></div>\n        </div>\n      );\n    }\n    return (\n      <div className={classes.ContainerReading}>\n        <h2>{this.state.data.author}</h2>\n        <h3>{this.state.data.title}</h3>\n        <h4>{this.state.data.genre}</h4>\n        <div>\n          {this.state.data.categories.map((cat, index) => (\n            <h5 key={index}>{cat}</h5>\n          ))}\n        </div>\n\n        {this.state.data.poem.akapits.map((akapit, indAka) => (\n          <div className={classes.Akapit} key={indAka}>\n            {akapit.lines.map((line, index) => (\n              <p className={classes.Line} key={index}>\n                {line}\n              </p>\n            ))}\n          </div>\n        ))}\n        <h5>{this.state.data.year}</h5>\n        <p>{this.state.data.description}</p>\n        <div style={{ marginTop: \"30px\" }}>\n          <button onClick={() => this.showCommentsHandler()}>\n            WyÅ›wietl komentarze\n          </button>\n        </div>\n        <div>\n          {this.state.comments === false ? null : (\n            <div>\n              <div>\n                {this.state.commentsData.map((comment) => (\n                  <div>\n                    <h3>{comment.commentAuthor}</h3>\n                    <h4>{comment.comment}</h4>\n                    <h5>{comment.commentedAt}</h5>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n          <div>\n            <input\n              type=\"text\"\n              onChange={(e) => this.setState({ myCom: e.target.value })}\n              value={this.state.myCom}\n              name=\"comment\"\n            />\n            <button onClick={() => this.addComment()}>dodaj komentarz</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PoemReading;\n","import React from \"react\";\nimport { getUser } from \"../../services/auth\";\nimport { adresse } from \"../../config\";\n\nclass Comments extends React.Component {\n  state = {\n    data: [],\n    myCom: \"\",\n  };\n  componentDidMount() {\n    const url = `${adresse}/comments/showComments/${this.props.idPoem}`;\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + getUser().token,\n    };\n    fetch(url, {\n      headers: headers,\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        this.setState({ data: data }, () => {\n          this.setState({ isLoading: false });\n        });\n      });\n  }\n\n  addComment() {\n    const url = `${adresse}comments/add/${this.props.idPoemm}`;\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + `${getUser().token}`,\n    };\n    fetch(url, {\n      method: \"POST\",\n      headers: headers,\n      body: JSON.stringify({ comment: this.state.comment }),\n    })\n      .then((response) => {\n        if (!response.ok) {\n          console.log(\"bÅ‚Ä…d\");\n        }\n        return response.json();\n      })\n      .then((data) => {});\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.data.length !== this.state.data.length) {\n      const url = `${adresse}comments/showComments/${this.props.idPoem}`;\n      const headers = {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + `${getUser().token}`,\n      };\n      fetch(url, {\n        headers: headers,\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          this.setState({ data: data });\n        });\n    }\n  }\n\n  render() {\n    console.log(this.state.data.length);\n    console.log(this.state.data);\n    return (\n      <div>\n        <div>\n          {this.state.data.map((comment) => (\n            <div>\n              <h3>{comment.commentAuthor}</h3>\n              <h4>{comment.comment}</h4>\n              <h5>{comment.commentedAt}</h5>\n            </div>\n          ))}\n          <input\n            type=\"text\"\n            onChange={(e) => this.setState({ comment: e.target.value })}\n            value={this.state.comment}\n            name=\"comment\"\n          />\n          <button onClick={() => this.addComment()}>dodaj komentarz</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Comments;\n"],"sourceRoot":""}